<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title></title>
<meta http-equiv="Content-Type" content="text/html;charset=windows-1251">
</head>
<link rel="stylesheet" href="../STYLE.css">
<body TEXT="#000000" BGCOLOR="#E7E3E7" LINK="#004080" VLINK="#004080" olink="#008080" Background="">
<table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="Index0.htm"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index8.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
<table BORDER =0 COLS=3 WIDTH="11%" >
  <tr> 
    <td WIDTH="10%">&nbsp;</td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td class="Text"><p class="tit_A">Архивация данных и программы сжатия </p>
      <p><span class="Text_i">Программы-архиваторы </span>можно разделить на три категории. </p>
      <ol>
        <li class="num">1.  Программы, используемые для сжатия исполняемых файлов, причем все 
      файлы, которые прошли сжатие, свободно запускаются, но изменение их 
      содержимого, например русификация, возможны только после их разар- 
      хивации. </li>
        <li class="num">2. Программы, используемые для сжатия мультимедийных файлов, причем 
          можно после сжатия эти файлы свободно использовать, хотя, как прави 
          ло, при сжатии изменяется их формат (внутренняя структура), а иногда и 
          ассоциируемая с ними программа, что может привести к проблемам с за 
          пуском. </li>
        <li class="num">3. Программы, используемые для сжатия любых видов файлов и каталогов, причем в основном использование сжатых файлов возможно только по сле разархивации. Хотя имеются программы, которые &quot;видят&quot; некоторые типы архивов как самые обычные каталоги, но они имеют ряд неприят ных нюансов, например, сильно нагружают центральный процессор, что исключает их использование на &quot;слабых машинах&quot;. </li>
      </ol>      <p>Принцип работы архиваторов основан на поиске в файле &quot;избыточной&quot; ин формации и последующем ее кодировании с целью получения минималь ного объема. Самым известным методом архивации файлов является сжатие последовательностей одинаковых символов. Например, внутри вашего файла находятся последовательности байтов, которые часто повторяются. Вместо того, чтобы хранить каждый байт, фиксируется количество повторяемых символов и их позиция. Например, архивируемый файл занимает 15 байт и состоит из следующих символов: </p>
      <p class="Code">В В В В В LLLLLAAAAA </p>
      <p>В шестнадцатеричной системе </p>
      <p class="Code">42 42 42 42 42 4С 4С 4С 4С 4С 41 41 41 41 41 </p>
      <p>Архиватор может представить этот файл в следующем виде (шестнадцате-ричном): </p>
      <p class="Code">01 05 42 06 05 4С 0А 05 41 </p>
      <p>Это значит: с первой позиции пять раз повторяется символ &quot;В&quot;, с позиции 6 пять раз повторяется символ &quot; L &quot; и с позиции 11 пять раз повторяется сим вол &quot;А&quot;. Для хранения файла в такой форме потребуется всего 9 байт, что на 6 байт меньше исходного. </p>
      <p>Описанный метод является простым и очень эффективным способом сжа тия файлов. Однако он не обеспечивает большой экономии объема, если обрабатываемый текст содержит небольшое количество последовательностей повторяющихся символов. </p>
      <p>Более изощренный метод сжатия данных, используемый в том или ином виде практически любым архиватором, — это так называемый оптимальный префиксный код и, в частности, кодирование символами переменной длины (алгоритм Хаффмана). </p>
      <p>Код переменной длины позволяет записывать наиболее часто встречающиеся символы и группы символов всего лишь несколькими битами, в то время как редкие символы и фразы будут записаны более длинными битовыми строками. Например, в любом английском тексте буква Е встречается чаще, чем Z , а X и Q относятся к наименее встречающимся. Таким образом, ис пользуя специальную таблицу соответствия, можно закодировать каждую букву Е меньшим числом битов и использовать более длинный код для бо лее редких букв. Популярные архиваторы ARJ , РАК, PKZIP работают на основе алгоритма Лемпела-Зива. Эти архиваторы классифицируются как адаптивные словарные кодировщики, в которых текстовые строки заменяются указателями на идентичные им строки, встречающиеся ранее в тексте. Например, все слова какой- нибудь книги могут быть представлены в виде номеров страниц и номеров строк некоторого словаря. Важнейшей отличительной чертой этого алгоритма является использование грамматического разбора предшествующего текста с расположением его на фразы, которые записываются в словарь. Указатели позволяют сделать ссылки на любую фразу в окне установленного размера, предшествующего текущей фразе. Если соответствие найдено, текущая фраза заменяется указателем на своего предыдущего двойника. </p>
      <p>При архивации, как и при компрессировании, степень сжатия файлов силь но зависит от формата файла. Графические файлы, типа TIF и GIF , уже за ранее компрессированы (хотя существует разновидность формата TIFF и без компрессии), и здесь даже самый лучший архиватор мало чего найдет для упаковки. Совсем другая картина наблюдается при архивации текстовых файлов, файлов PostScript , файлов BMP и им подобных. </p></td>
  </tr>
</table>
<table BORDER =0 COLS=3 WIDTH="11%" >
  <tr> 
    <td WIDTH="10%">&nbsp;</td>
  </tr>
</table>

<table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="Index0.htm"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index8.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
</body>
</html>